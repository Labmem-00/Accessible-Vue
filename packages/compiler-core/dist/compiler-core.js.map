{
  "version": 3,
  "sources": ["../src/runtimeHelper.ts", "../src/Ast.ts", "../src/parser.ts", "../src/transform.ts", "../src/index.ts"],
  "sourcesContent": ["export const TO_DISPLAY_STRING = Symbol('TO_DISPLAY_STRING');\r\nexport const CREATE_TEXT_VNODE = Symbol(\"CREATE_TEXT_VNODE\");\r\nexport const CREATE_ELEMENT_VNODE = Symbol(\" CREATE_ELEMENT_VNODE\")\r\n\r\nexport const OPEN_BLOCK = Symbol(\"OPEN_BLOCK\");\r\nexport const CREATE_ELEMENT_BLOCK = Symbol(\"ELEMENT_BLOCK\")\r\nexport const Fragment = Symbol(\"Fragment\")\r\n\r\nexport const helperNameMap = {\r\n    [TO_DISPLAY_STRING] : \"toDisplayString\",\r\n    [CREATE_TEXT_VNODE] : \"createTextVNode\",\r\n    [CREATE_ELEMENT_VNODE] : \"createElementVNode\",\r\n    [CREATE_ELEMENT_BLOCK] : \"createElementBlock\",\r\n    [OPEN_BLOCK] : \"openBlock\",\r\n    [Fragment] : \"Fragment\"\r\n}\r\n//\u5B8F", "import { CREATE_ELEMENT_VNODE, CREATE_TEXT_VNODE, Fragment } from \"./runtimeHelper\";\r\n\r\nexport enum NodeTypes {\r\n    ROOT,\r\n    ELEMENT,\r\n    TEXT,\r\n    COMMENT,\r\n    SIMPLE_EXPRESSION, // {{ name }}\r\n    INTERPOLATION, // {{}}\r\n    ATTRIBUTE,\r\n    DIRECTIVE,\r\n    // containers\r\n    COMPOUND_EXPRESSION, // {{ name}} + 'abc'\r\n    IF,\r\n    IF_BRANCH,\r\n    FOR,\r\n    TEXT_CALL, // createVnode\r\n    // x\r\n    VNODE_CALL,\r\n    JS_CALL_EXPRESSION, // ()\r\n    JS_OBJECT_EXPRESSION, // props\r\n    JS_PROPERTY,\r\n    JS_ARRAY_EXPRESSION,\r\n    JS_FUNCTION_EXPRESSION,\r\n    JS_CONDITIONAL_EXPRESSION,\r\n    JS_CACHE_EXPRESSION,\r\n  \r\n    // ssr codegen\r\n    JS_BLOCK_STATEMENT,\r\n    JS_TEMPLATE_LITERAL,\r\n    JS_IF_STATEMENT,\r\n    JS_ASSIGNMENT_EXPRESSION,\r\n    JS_SEQUENCE_EXPRESSION,\r\n    JS_RETURN_STATEMENT,\r\n  }\r\n\r\n  export function createCallExpression(context,args){\r\n    let name = context.helper(CREATE_TEXT_VNODE);\r\n\r\n    return{\r\n      type: NodeTypes.JS_CALL_EXPRESSION,\r\n      arguments: args,\r\n      callee: name,//\u8FD4\u56DE\u503C\r\n    }\r\n  }\r\n\r\n  export function createVNodeCall(context, tag, props, children){ //\u521B\u5EFAvnode\u7ED3\u6784\r\n      let name;\r\n      if(tag !== Fragment){\r\n        name = context.helper(CREATE_ELEMENT_VNODE);\r\n      }\r\n      return{\r\n        type: NodeTypes.VNODE_CALL,\r\n        tag, \r\n        props, \r\n        children,\r\n        callee:name\r\n      }\r\n  }\r\n\r\n  export function createObjectExpression(properties) {\r\n    return {\r\n      type: NodeTypes.JS_OBJECT_EXPRESSION,\r\n      properties,\r\n    }\r\n  }", "//vue\u6A21\u677F\u7F16\u8BD1\u8FC7\u7A0B \r\n//1.\u6A21\u677F\u901A\u8FC7\u8BCD\u6CD5\u5206\u6790\uFF0C\u8BED\u6CD5\u5206\u6790\u8F6C\u5316\u4E3Aast\u8BED\u6CD5\u6811 \r\n//2.\u8BED\u6CD5\u6811\u901A\u8FC7\u8BED\u4E49\u5206\u6790\u8F6C\u5316\u751F\u6210codegennode => \u751F\u6210block\uFF0C\u52A8\u6001\u6570\u636E\u63D2\u5165key\u503C\uFF0C\u751F\u6210\u7F16\u8BD1\u4F18\u5316\u7684js\u4EE3\u7801(\u91CD\u7528\u4E0E\u9776\u5411\u66F4\u65B0)\r\n//3.\u6700\u540E\u8FD4\u56DErender\u51FD\u6570 \r\n\r\nimport { NodeTypes } from \"./Ast\";\r\n\r\nfunction createParseContext(content: string){ //\u521B\u5EFA\u89E3\u6790\u4E0A\u4E0B\u6587\r\n    return{\r\n        originalSource: content,//\u539F\u6A21\u677F\u5185\u5BB9\r\n        source: content , //\u5F53\u524D\u89E3\u6790\u5185\u5BB9\uFF0C\r\n        line: 1, //\u5F53\u524D\u89E3\u6790\u884C\u6570\r\n        column: 1, //\u5F53\u524D\u89E3\u6790\u5217\u6570\r\n        offset: 0, //\u504F\u79FB\u503C\uFF0C\u539F\u6A21\u677F\u8D77\u59CB\u4F4D\u7F6E\u4E0E\u5F53\u524D\u89E3\u6790\u6A21\u677F\u5B57\u7B26\u7684\u8DDD\u79BB\r\n    };\r\n}\r\n\r\nfunction parseInterpolation(context){ //\u5904\u7406\u63D2\u503C\u8868\u8FBE\u5F0F\r\n    const start = getCursor(context);\r\n    const closeIndex = context.source.indexOf(\"}}\", 2);\r\n    advanceBy(context, 2);\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const preTrimContent = parseTextData(context, closeIndex-2); //\u63D2\u503C\u5185\u5BB9\r\n    const content = preTrimContent.trim(); //\u9664\u53BB\u63D2\u503C\u6587\u672C\u524D\u540E\u7684\u7A7A\u683C\r\n    \r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if(startOffset >0){\r\n        advacePositionMutation(innerStart, preTrimContent, startOffset);\r\n    }\r\n\r\n    const endOffset = startOffset + content.length;\r\n    advacePositionMutation(innerEnd, preTrimContent, endOffset);\r\n    advanceBy(context, 2);\r\n\r\n    return{\r\n        type: NodeTypes.INTERPOLATION,\r\n        content:{\r\n            type: NodeTypes.SIMPLE_EXPRESSION,\r\n            isStatic: false,\r\n            isConstant: false,\r\n            content,\r\n            location: getSelection(context, innerStart, innerEnd),\r\n        },\r\n        location: getSelection(context, start)\r\n    }\r\n}\r\n\r\nfunction parseText(context){\r\n    let tokens = ['<','{{']; //\u5339\u914D\u6587\u672C\u503C\u5F53\u524D\u6700\u8FD1\u7684\u8BCD\u6CD5,\u53BB\u9664\u6807\u7B7E\u548C\u8868\u8FBE\u5F0F\r\n    let endIndex = context.source.length;\r\n    for(let i=0 ; i<tokens.length ; i++){\r\n        const index = context.source.indexOf(tokens[i], 1);\r\n        if(index != -1 && endIndex > index){\r\n            endIndex = index; //0 - endIndex \r\n        }\r\n    }\r\n    let start = getCursor(context);\r\n    let content = parseTextData(context, endIndex);\r\n\r\n    return{\r\n        type: NodeTypes.TEXT,\r\n        content,\r\n        locatiob: getSelection(context, start)\r\n    }\r\n}\r\nfunction parseTextData(context, endIndex){\r\n    const content = context.source.slice(0,endIndex);\r\n    advanceBy(context, endIndex);\r\n    return content;\r\n}\r\n\r\nfunction parseAttributeValue(context) {\r\n    let quote = context.source[0];\r\n  \r\n    const isQuoted = quote === '\"' || quote === \"'\";\r\n  \r\n    let content;\r\n    if (isQuoted) {\r\n      advanceBy(context, 1);\r\n      const endIndex = context.source.indexOf(quote, 1);\r\n      content = parseTextData(context, endIndex); // slice()\r\n      advanceBy(context, 1);\r\n    } else {\r\n      content = context.source.match(/([^ \\t\\r\\n/>])+/)[1]; // \u53D6\u51FA\u5185\u5BB9\uFF0C\u5220\u9664\u7A7A\u683C\r\n      advanceBy(context, content.length);\r\n      advanceSpaces(context);\r\n    }\r\n    return content;\r\n  }\r\n\r\nfunction parseAttribute(context){\r\n    let start = getCursor(context);\r\n    let match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    if(!match){\r\n        return null\r\n    }\r\n    const name = match[0];\r\n    let value;\r\n    advanceBy(context, name.length);\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) { //\u5220\u9664\u7A7A\u683C\u4E0E\u7B49\u53F7\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n        advanceSpaces(context);\r\n\r\n        value = parseAttributeValue(context)\r\n    }\r\n\r\n    let location = getSelection(context, start);\r\n    return{\r\n        type: NodeTypes.ATTRIBUTE,\r\n        name,\r\n        value:{\r\n            type: NodeTypes.TEXT,\r\n            content: value,\r\n        },\r\n        location\r\n    }\r\n}\r\n\r\nfunction parseAttributes(context){\r\n    const props = [];\r\n    while(context.source.length > 0 && \r\n            (!context.source.startsWith(\">\")) \r\n        ){\r\n        const prop = parseAttribute(context);\r\n        if(prop){\r\n            props.push(prop);\r\n        }else{\r\n            break\r\n        }\r\n        advanceSpaces(context);\r\n    }\r\n    return props;\r\n}\r\n\r\nfunction parseTag(context){\r\n    const start = getCursor(context);\r\n    const match = /^<\\/?([a-z][^ \\t\\r\\n/>]*)/.exec(context.source )\r\n    const tag = match[1];\r\n\r\n    advanceBy(context, match[0].length) //\u5220\u9664\u5339\u914D\u7684open\u6807\u7B7E\r\n    advanceSpaces(context); //\u5220\u9664\u591A\u4F59\u7684\u7A7A\u683C\r\n\r\n    let props = parseAttributes(context); //\u5904\u7406\u6807\u7B7E\u5C5E\u6027\r\n    \r\n    const isSelfClosing = context.source.startsWith(\"/>\");\r\n    advanceBy(context,isSelfClosing ? 2 : 1) //\u5220\u9664\u5339\u914D\u7684selfclose\u6807\u7B7E\r\n   \r\n    return {\r\n        type: NodeTypes.ELEMENT,\r\n        tag,\r\n        isSelfClosing,\r\n        location: getSelection(context, start),\r\n        props\r\n    }\r\n}\r\n\r\nfunction parseElement(context){\r\n    const ele = parseTag(context);\r\n    const children = parseChildren(context);\r\n\r\n    if(context.source.startsWith('</')){\r\n        parseTag(context); //\u76F4\u63A5\u79FB\u9664\u95ED\u5408\u6807\u7B7E\r\n    }\r\n\r\n    (ele as any).children = children;\r\n    (ele as any).location = getSelection(context, ele.location.start);\r\n\r\n    return ele;\r\n}\r\n\r\nfunction advanceBy(context, endIndex){\r\n    let c = context.source;\r\n    advacePositionMutation(context, c, endIndex)\r\n    context.source = c.slice(endIndex);\r\n}\r\nfunction advanceSpaces(context){\r\n    const match = /^[ \\t\\r\\n]+/.exec(context.source)\r\n    \r\n    if(match){\r\n        advanceBy(context, match[0].length);\r\n    }\r\n}\r\nfunction getCursor(context) {\r\n    let { line, column, offset } = context;\r\n    return { line, column, offset };\r\n}\r\nfunction getSelection(context, start, e?) { //\u8FD4\u56DE\u5F53\u524D\u89E3\u6790\u6587\u672C\u5728\u4E0A\u4E0B\u6587\u4E2D\u7684\u4F4D\u7F6E\u4FE1\u606F\r\n    let end = e || getCursor(context);\r\n    // eslint \u53EF\u4EE5\u6839\u636E start\uFF0Cend\u627E\u5230\u8981\u62A5\u9519\u7684\u4F4D\u7F6E\r\n    return {\r\n      start,\r\n      end,\r\n      source: context.originalSource.slice(start.offset, end.offset),\r\n    };\r\n}\r\nfunction advacePositionMutation(context, content, endIndex){ //\u66F4\u65B0\u5F53\u524D\u89E3\u6790\u4F4D\u7F6E\u4FE1\u606F\r\n    let linesCount = 0; //\u7528\u4E8E\u8BA1\u6570\u5B57\u7B26\u4E32\u4E2D\u6362\u884C\u7B26\u7684\u6570\u91CF\uFF0C\u521D\u59CB\u503C\u4E3A 0\r\n    let linePos = -1;//\u7528\u4E8E\u8BB0\u5F55\u6700\u540E\u4E00\u4E2A\u6362\u884C\u7B26\u7684\u4F4D\u7F6E\uFF0C\u521D\u59CB\u503C\u4E3A -1\uFF08\u8868\u793A\u5C1A\u672A\u627E\u5230\u4EFB\u4F55\u6362\u884C\u7B26\uFF09\r\n\r\n    for(let i = 0 ; i < endIndex ; i++){\r\n        if(content.charCodeAt(i) == 10 ){ //10\u4E3A\u6362\u884C\u7B26\r\n            linesCount++; \r\n            linePos = i; \r\n        }\r\n    }\r\n\r\n    context.offset += endIndex;\r\n    context.line +=linesCount;\r\n    context.column = linePos == -1 ? context.column + endIndex : endIndex - linePos;\r\n}\r\n   \r\nfunction isEnd(context) {\r\n    const c = context.source;\r\n    if (c.startsWith(\"</\")) {\r\n      // \u5982\u679C\u662F\u95ED\u5408\u6807\u7B7E\uFF0C\u4E5F\u8981\u505C\u6B62\u5FAA\u73AF\r\n      return true;\r\n    }\r\n    return !context.source;\r\n}\r\n\r\n\r\n\r\nfunction parseChildren(context){\r\n    const nodes = [] as any;\r\n    //\u6709\u9650\u72B6\u6001\u673A\r\n    while(!isEnd(context)){\r\n        const c = context.source;\r\n        let node;\r\n        if(c.startsWith(\"{{\")){ //{{}}\r\n            node = parseInterpolation(context)\r\n        }else if(c[0]==='<'){ //<div>\r\n            node = parseElement(context)\r\n        }else { //\u6587\u672C\r\n           node =  parseText(context)\r\n        }\r\n        nodes.push(node);\r\n    }\r\n    //\u53BB\u9664\u7A7A\u7ED3\u70B9\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        let node = nodes[i];\r\n        // \u5C06\u7A7A\u8282\u70B9\u8FDB\u884C\u538B\u7F29\r\n        if (node.type === NodeTypes.TEXT) {\r\n          // \u5982\u679C\u662F\u7A7A\u767D\u5B57\u7B26 \u6E05\u7A7A\r\n          if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n            nodes[i] = null; // \u7A7A\u767D\u5B57\u7B26\u6E05\u7A7A\r\n          } else {\r\n            node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, \" \");\r\n          }\r\n        }\r\n      }\r\n    return nodes.filter(Boolean);\r\n}\r\n\r\nfunction createRoot(children){\r\n    return{\r\n        type: NodeTypes.ROOT,\r\n        children\r\n    }\r\n}\r\n\r\nfunction parse(template){\r\n    //\u4F7F\u7528template\u751F\u6210\u6811\r\n    const context = createParseContext(template);\r\n    return createRoot(parseChildren(context)) \r\n}\r\n\r\nexport {parse}", "import { CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE,Fragment, OPEN_BLOCK, TO_DISPLAY_STRING } from \"./runtimeHelper\";\r\nimport { createCallExpression, createObjectExpression, createVNodeCall, NodeTypes } from \"./Ast\";\r\nimport { PatchFlags } from \"@simple-vue/shared\";\r\n\r\n\r\n//\u904D\u5386ast\u8BED\u6CD5\u6811\uFF0C \u5148\u5E8F\u641C\u7D22\uFF0C\u8FD4\u56DE\u5E76\u4FDD\u5B58\u51FD\u6570\uFF0C\u540E\u5E8F\u6267\u884C\r\nfunction transformElement(node, context){\r\n    if(node.type == NodeTypes.ELEMENT){\r\n        return function(){\r\n            let {tag, props, children} = node;\r\n            let vnodeTag = tag;\r\n            let properties = [];\r\n            \r\n            for(let i=0 ; i<props.length ; i++){\r\n                properties.push({key:props[i].name,value: props[i].value.content} );\r\n             }\r\n\r\n            const propsExpression = properties.length > 0 ? createObjectExpression(properties):null \r\n\r\n            let vnodeChildren = null;\r\n            if(children.length == 1){\r\n                vnodeChildren = children[0];\r\n            }else if(children.length > 1){\r\n                vnodeChildren = children;\r\n            };\r\n\r\n            node.codegenNode = createVNodeCall(context,vnodeTag,propsExpression,vnodeChildren)\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isText(node){\r\n    return node.type === NodeTypes.INTERPOLATION || node.type === NodeTypes.TEXT\r\n}\r\nfunction transformText(node, context){\r\n    if(node.type == NodeTypes.ELEMENT || node.type == NodeTypes.ROOT){\r\n    \r\n        //\u5904\u7406\u987A\u5E8F\uFF0C\u7B49\u5F85\u5B50\u8282\u70B9\u5168\u90E8\u5904\u7406\u540E\uFF0C\u8D4B\u503C\u7ED9\u7236\u5143\u7D20\r\n        return function(){ \r\n            const children = node.children;\r\n            let containner = null;\r\n            let hasText = false;\r\n            for(let i=0 ; i<children.length ; i++){ //\u5408\u5E76\u8868\u8FBE\u5F0F\u4E0E\u6587\u672C\u8282\u70B9\uFF0C\u4F18\u5316\u6548\u7387\r\n                let child =children[i];\r\n\r\n                if(isText(child)){\r\n                    hasText = true;\r\n                    for(let j = i+1; j<children.length ; j++){\r\n                        const next = children[j];\r\n\r\n                        if(isText(next)){\r\n                            if(!containner){\r\n                                containner = children[i] = {\r\n                                    type: NodeTypes.COMPOUND_EXPRESSION,\r\n                                    children: [child]\r\n\r\n                                }\r\n                            }\r\n                            containner.children.push('+', next);\r\n                            children.splice(j,1);\r\n                            j--;\r\n                        }else{\r\n                            containner = null; \r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n \r\n            //\u5982\u679C\u6587\u672C\u8282\u70B9\u4EC5\u6709\u4E00\u4E2A\uFF0C\u65E0\u9700\u521B\u5EFA\u65B0\u5143\u7D20\uFF0C\u76F4\u63A5\u4F5C\u4E3A\u5B50\u8282\u70B9\r\n            if(!hasText || children.length == 1){\r\n                return;\r\n            };\r\n\r\n            for(let i=0 ; i<children.length ; i++){\r\n                let child = children[i];\r\n\r\n                if(isText( child) || child.type === NodeTypes.COMPOUND_EXPRESSION){\r\n                    const args = [];\r\n                    args.push(child);\r\n\r\n                    if(child.type !== NodeTypes.TEXT){\r\n                        args.push(PatchFlags.TEXT);\r\n                    }\r\n\r\n                    children[i] = {\r\n                        type: NodeTypes.TEXT_CALL,\r\n                        context:child,\r\n                        codegenNode: createCallExpression(context, args)\r\n                    }\r\n                }\r\n            }\r\n              \r\n        }\r\n    }\r\n}}\r\n\r\nfunction transformExpression(node, context){\r\n    if(node.type == NodeTypes.INTERPOLATION){\r\n        node.content.content = `_ctx.${node.content.content}`;\r\n    }\r\n} \r\n\r\n\r\nfunction createTransformContext(root){\r\n    const context = { //\u521B\u5EFA\u904D\u5386\u4E0A\u4E0B\u6587\r\n        currentNode: root,\r\n        parent: null,\r\n        transformNode:[ //\u904D\u5386\u65B9\u6CD5\uFF0C\u4F9D\u6B21\u5143\u7D20\uFF0C\u6587\u672C\uFF0C\u8868\u8FBE\u5F0F\r\n            transformElement,\r\n            transformText,\r\n            transformExpression\r\n        ],\r\n        helpers: new Map(), //\u8BB0\u5F55\u65B9\u6CD5\u4E0E\u8C03\u7528\u6B21\u6570\r\n        helper(name){\r\n            let count = context.helpers.get(name) || 0;\r\n            context.helpers.set(name, count+1);\r\n            return name; \r\n        },\r\n        removeHelper(name){\r\n           let count = context.helpers.get(name);\r\n\r\n           if(count){\r\n            let v =count - 1;\r\n\r\n            if(!count){\r\n                context.helpers.delete(name);\r\n            }else{\r\n                context.helpers.set(name,count);\r\n            }\r\n           }\r\n        }\r\n    }\r\n    return context;\r\n}\r\n\r\nfunction traverseNode(node, context){\r\n    context.currentNode = node;\r\n    const transforms = context.transformNode;\r\n\r\n    const exits = []; //\u56DE\u9000\u6808\u6267\u884C\u540E\u5E8F\u904D\u5386\uFF0C\u5148\u5B58\u50A8\u8F6C\u6362\u51FD\u6570\uFF0C\u4E0D\u65AD\u904D\u5386\u5B50\u8282\u70B9\uFF0C\u904D\u5386\u5B8C\u6210\u4ECE\u6808\u9876\u53D6\u51FA\u4F9D\u6B21\u6267\u884C\r\n    for(let i = 0; i < transforms.length; i++){\r\n       let exit = transforms[i](node,context);\r\n\r\n       exit && exits.push(exit);\r\n    }\r\n\r\n    switch(node.type){\r\n        case NodeTypes.ROOT:\r\n        case NodeTypes.ELEMENT:\r\n            for(let i=0 ; i < node.children.length; i++){\r\n                context.parent = node;\r\n                traverseNode(node.children[i],context);\r\n            }\r\n            break;\r\n        case NodeTypes.INTERPOLATION:\r\n            context.helper(TO_DISPLAY_STRING);\r\n            break\r\n    }\r\n    context.currentNode = node; //\u5F53\u524D\u5B50\u8282\u70B9\u91CD\u65B0\u8D4B\u503C\r\n    let i = exits.length\r\n    if(i>0){\r\n        while(i--){\r\n            exits[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction createRootCodegenNode(ast, context){\r\n    let {children} = ast;\r\n\r\n    if(children.length == 1){\r\n        let child = children[0];\r\n        if(child.type === NodeTypes.ELEMENT){\r\n            ast.codegenNode = child.codegenNode;\r\n            context.removeHelper(CREATE_ELEMENT_VNODE);\r\n            context.helper(CREATE_ELEMENT_BLOCK);\r\n            context.helper(OPEN_BLOCK);\r\n            ast.codegenNode.isBlock = true;\r\n        }else{\r\n            ast.codegenNode = child;\r\n        }\r\n    }else if(children.length > 0){\r\n\r\n        ast.codegenNode = createVNodeCall(context,context.helper(Fragment),undefined,children)\r\n\r\n        context.helper(CREATE_ELEMENT_BLOCK);\r\n        context.helper(OPEN_BLOCK);\r\n        ast.codegenNode.isBlock = true;\r\n    }\r\n}\r\n\r\nfunction transform(ast){\r\n    const context = createTransformContext(ast);\r\n    traverseNode(ast,context);\r\n\r\n    //\u5BF9\u6839\u8282\u70B9\u8FDB\u884C\u5904\u74061.\u6587\u672C 2.\u4E00\u4E2A\u5143\u7D20 \u4F7F\u7528ElementBlock 3.\u591A\u4E2A\u5143\u7D20 Fragment\u5305\u88F9\u591A\u4E2AElementBlock\r\n    createRootCodegenNode(ast, context);\r\n\r\n    (ast as any).helpers = [...context.helpers.keys()]\r\n}\r\n\r\nexport {transform};\r\n", "import { NodeTypes } from \"./Ast\";\r\nimport {parse} from \"./parser\"\r\nimport { CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, helperNameMap, OPEN_BLOCK, TO_DISPLAY_STRING } from \"./runtimeHelper\";\r\nimport { transform } from \"./transform\";\r\n\r\nfunction createCodegenContext(ast){\r\n    const context = {\r\n        code: '',\r\n        level: 0,//\u7F29\u8FDB\u7EA7\u522B\r\n        helper(name){\r\n            return \"_\" + helperNameMap[name];\r\n        }, \r\n        push(code){\r\n            context.code += code\r\n        },\r\n        //\u6362\u884C\u5E76\u63A7\u5236\u5F53\u524D\u4EE3\u7801\u7F29\u8FDB,\r\n        indent(){\r\n            newLine(++context.level);\r\n        }, \r\n        deindent(noNewLine=false){\r\n            if(noNewLine){\r\n                --context.level;\r\n            }else{\r\n                newLine(--context.level);\r\n            }\r\n            \r\n        },\r\n        //\u6362\u884C\r\n        newLine(n?){\r\n            if(n){\r\n                while(n-->0){   \r\n                    newLine(context.level);\r\n                }\r\n            }else{\r\n                newLine(context.level);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function newLine(n){\r\n        context.push(\"\\n\" + '   '.repeat(n));\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\nfunction genFunctionPreamble(ast,context){\r\n    const {push,indent,deindent,newLine} = context;\r\n\r\n    if(ast.helpers.length > 0){\r\n        push(\r\n            `const { ${ast.helpers.map(\r\n                (item)=>`${helperNameMap[item]}: ${context.helper(item)}`)}} = Vue`  \r\n        )\r\n    }\r\n\r\n    newLine(2);\r\n    push(`return function render(_ctx){`);\r\n\r\n\r\n} \r\n\r\nfunction genText(node, context){\r\n    context.push(` ${JSON.stringify(node.content)}`)\r\n}\r\n\r\nfunction genInterpolation(node, context){\r\n    const {push,indent,deindent,newLine,helper} = context;\r\n\r\n    push(`${helper(TO_DISPLAY_STRING)}(`);\r\n    genNode(node.content,context);\r\n    push(`)`)\r\n\r\n}\r\n\r\nfunction genExpression (node,context){\r\n    context.push(node.content);\r\n}\r\n\r\nfunction genVnodeCall(node, context){\r\n    const {push,indent,deindent,newLine,helper} = context;\r\n    const {tag,props,children,isBlock} = node;\r\n    if(isBlock){\r\n        push(` (${helper(OPEN_BLOCK)}(), `);\r\n    }\r\n\r\n    const h = isBlock ? CREATE_ELEMENT_BLOCK : CREATE_ELEMENT_VNODE;\r\n\r\n    push(`${helper(h)}(`);\r\n    \r\n\r\n    if(isBlock){\r\n        push(`)`);\r\n    }\r\n    push(`)`)\r\n}\r\n\r\nfunction genNode(node,context){\r\n    const {push,indent,deindent,newLine} = context;\r\n    switch(node.type){\r\n        \r\n        case NodeTypes.TEXT:\r\n            genText(node,context);\r\n            break;\r\n        case NodeTypes.INTERPOLATION:\r\n            genInterpolation(node,context);\r\n            break;\r\n        case NodeTypes.SIMPLE_EXPRESSION:\r\n            genExpression(node,context)\r\n            break; \r\n        case NodeTypes.VNODE_CALL:\r\n            genVnodeCall(node,context);\r\n            break;\r\n    }\r\n\r\n}\r\n\r\n//\u4EE3\u7801\u751F\u6210\r\nfunction generate(ast){\r\n    const context = createCodegenContext(ast);\r\n    const {push,indent,deindent,newLine} = context;\r\n\r\n    //\u62FC\u63A5\u4EE3\u7801\u5B57\u7B26\u4E32\r\n    genFunctionPreamble(ast,context); //\u5BFC\u5165\u5E2E\u52A9\u51FD\u6570\r\n    indent(); \r\n    push(`return`);  \r\n    if(ast.codegenNode){\r\n        genNode(ast.codegenNode, context)\r\n    }else{\r\n        push(` null`);\r\n    }\r\n\r\n    deindent();\r\n    push(`}`)\r\n    console.log(context.code)\r\n\r\n    return context.code;\r\n\r\n}\r\n\r\nexport function compile(template){\r\n\r\n    const ast = parse(template) //\u8BCD\u6CD5\u5206\u6790\u5668\uFF0C\u751F\u6210\u8BED\u6CD5\u6811\r\n    console.log(ast);\r\n    transform(ast); //\u8282\u70B9\u8F6C\u6362\u4E0E\u4F18\u5316\uFF0C\u6DFB\u52A0\u8F85\u52A9\u51FD\u6570\r\n\r\n    return generate(ast);\r\n    debugger\r\n\r\n    \r\n}\r\n\r\nexport {parse,transform};"],
  "mappings": "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",
  "names": ["i", "child"]
}
